{"version":3,"sources":["convert.service.js","engines/objectConverter.service.js","engines/queryStringConverter.service.js","engines/stringConverter.service.js"],"names":["angular","module","window","string","object","$objectConverter","Error","obj","newObj","keysToCamelCase","convertObjectKeys","$stringConverter","str","s","convertCase","split","key","val","isDefined","isArray","push","parts","value","v","toJson","join","tryEncodeURIComponent","toSnakeCase","$window","String","trim","replace","$1","slice","ucfirst","Number","index","match","toLowerCase","o","length","decodeURIComponent"],"mappings":"iBAKAA,eAYEC,OAAO,mBAAA,kCAAA,kCAAA,2IAONC,OCxBFC,OAASD,EAA6BE,OAAAC,4DAKvCL,4KAqBMA,EAAUM,SAAMC,qGAUdC,6CAKJ,GAAOA,GAAAA,EAAAA,GAAAA,qBAMT,MAAOA,iEC/CRC,gBAAiBT,SAAoBO,GAAC,MAAAG,GAAAH,EAAA,4DAKvCP,0GAaQ,yBAAA,mBAAA,SAAAW,uPAmCJ,OAAOC,2EAMT,MAAOA,mBASIC,SAAGA,EAAAC,MACNP,0CAIGM,SAAUA,GAAA,IAAOE,MAAOA,KAAM,SAAAF,GACnCG,kDASAC,EAAMjB,UAAQkB,SAMGC,EAAAA,MACXH,EAAKI,UAAKH,EAAAA,KAAAA,EAAAA,EAAAA,6BAMXV,EAAAA,QAAAA,EAAAA,wGAoBLc,uCAMWC,OAATA,GAASA,EAAAA,YAAAA,qCAWFA,EAAA,SAAAC,wDAOAvB,EAAAwB,OAAAD,IAKHT,uCAIJO,KAAMD,2BAQRC,EAAOA,KAAMI,EAAKT,GAAA,IAAAU,EAAAH,gCC7Ja,gDAKvCvB,eAMEC,OAAO,8CAKL0B,oBALK,UAKOf,SAAKgB,sBAOJC,SAAYC,SACd,gBAAAlB,aAEU,gBAARmB,GACJC,GAEE,MAANC,EAAMJ,OAAAjB,GAAAkB,oJAaED,SAAYC,EAAYI,SAC1B,gBAAAtB,aAGE,gBAARmB,GAEKI,6BAGIC,4JAeDP,SAAYC,SACd,gBAAAlB,aAGE,gBAARmB,GACQM,GAGMC,MAAb1B,EAAOyB,OAAMC,GAAAA,uLAcNT,SAAYC,SACd,gBAAAlB,aAEiB,gBAARA,GACXA,GAEwB,MAA7BA,EAAQoB,OAAGpB,GAAOkB,QACX,gMAYA,SAAAlB,gDAEFA,6EAYE,SAAAA,MACL2B,GAAA3B,EAAAmB,QAAA,IAAA,KAAAA,QAAA,IAAA,YACGQ,EAAAC,OAAA,OACHD,GACA,KACF,KAAA,GACEA,GAAA,UAEJ,KAAI,GACFA,GAAOE,GAET,yFAOHvC,MAAQA","file":"angular-convert.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.Service', [\n  'Convert.StringConverter.Service',\n  'Convert.ObjectConverter.Service',\n  'Convert.QueryStringConverter.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$convert', function(\n  $stringConverter, $objectConverter, $queryStringConverter\n) {\n  return {\n    string: $stringConverter,\n    object: $objectConverter,\n    queryString: $queryStringConverter,\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.ObjectConverter.Service', [\n  'Convert.StringConverter.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$objectConverter', function($stringConverter) {\n\n  /**\n   * Helper to convert object keys using a specified string converter\n   */\n  function convertObjectKeys(obj, converter) {\n\n    //Must have object\n    if (!angular.isObject(obj)) {\n      throw new TypeError('Not an object');\n    }\n\n    //Validate case\n    if (typeof $stringConverter[converter] === 'undefined') {\n      throw new Error('Invalid converter: ' + converter);\n    }\n\n    //Initialize object\n    let newObj = {};\n\n    //Loop keys\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let newKey = $stringConverter[converter](key);\n        newObj[newKey] = angular.copy(obj[key]);\n      }\n    }\n\n    //Return object\n    return newObj;\n  }\n\n  /**\n   * Object converter\n   */\n  return {\n\n    /**\n     * Convert object keys to snake case\n     */\n    keysToSnakeCase(obj) {\n      return convertObjectKeys(obj, 'toSnakeCase');\n    },\n\n    /**\n     * Convert object keys to snake case\n     */\n    keysToCamelCase(obj) {\n      return convertObjectKeys(obj, 'toCamelCase');\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.QueryStringConverter.Service', [\n  'Convert.StringConverter.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$queryStringConverter', function($stringConverter) {\n\n  /**\n   * Tries to decode an URI component without throwing an exception\n   */\n  function tryDecodeURIComponent(str) {\n    try {\n      return decodeURIComponent(str);\n    }\n    catch (e) {\n      //Fall through\n    }\n  }\n\n  /**\n   * Tries to encode an URI component without throwing an exception\n   */\n  function tryEncodeURIComponent(str, pctEncodeSpaces) {\n    try {\n      return encodeURIComponent(str)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    }\n    catch (e) {\n      //Fall through\n    }\n  }\n\n  /**\n   * Converts a string to a specific case\n   */\n  function convertToCase(str, convertCase) {\n    switch (convertCase) {\n      case 'snake':\n        return $stringConverter.toSnakeCase(str);\n      case 'camel':\n        return $stringConverter.toCamelCase(str);\n    }\n    return str;\n  }\n\n  /**\n   * Query string converter\n   */\n  return {\n\n    /**\n     * Parses an escaped url query string into key-value pairs\n     */\n    toObject(s, convertCase) {\n      let obj = {};\n      let kv, key, val;\n      angular.forEach((s || '').split('&'), (s) => {\n        if (!s) {\n          return;\n        }\n\n        //Split key/value and decode key\n        kv = s.replace(/\\+/g, '%20').split('=');\n        key = tryDecodeURIComponent(kv[0]);\n\n        //If not defined, exit\n        if (!angular.isDefined(key)) {\n          return;\n        }\n\n        //Convert case and get value\n        key = convertToCase(key, convertCase);\n        val = angular.isDefined(kv[1]) ? tryDecodeURIComponent(kv[1]) : true;\n\n        //Set property\n        if (!hasOwnProperty.call(obj, key)) {\n          obj[key] = val;\n        }\n        else if (angular.isArray(obj[key])) {\n          obj[key].push(val);\n        }\n        else {\n          obj[key] = [obj[key], val];\n        }\n      });\n      return obj;\n    },\n\n    /**\n     * Convert key-value pairs object to a parametrized query string\n     */\n    fromObject(obj, convertCase) {\n\n      //No obj?\n      if (!obj || !angular.isObject(obj)) {\n        return '';\n      }\n\n      //Initialize parts array\n      let parts = [];\n\n      //Loop the parameters\n      angular.forEach(obj, (value, key) => {\n\n        //Skip null/undefined values\n        if (value === null || angular.isUndefined(value)) {\n          return;\n        }\n\n        //Convert to array\n        if (!angular.isArray(value)) {\n          value = [value];\n        }\n\n        //Loop values\n        angular.forEach(value, (v) => {\n\n          //Handle objects\n          if (angular.isObject(v)) {\n            if (angular.isDate(v)) {\n              v = v.toISOString();\n            }\n            else {\n              v = angular.toJson(v);\n            }\n          }\n\n          //Convert case?\n          switch (convertCase) {\n            case 'snake':\n              key = $stringConverter.toSnakeCase(key);\n              break;\n            case 'camel':\n              key = $stringConverter.toCamelCase(key);\n              break;\n          }\n\n          //Push to parts\n          parts.push(\n            tryEncodeURIComponent(key) + '=' + tryEncodeURIComponent(v)\n          );\n        });\n      });\n\n      //Any parts?\n      if (parts.length > 0) {\n        return parts.join('&');\n      }\n\n      //No parts\n      return '';\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.StringConverter.Service', [])\n\n/**\n * Factory definition\n */\n.factory('$stringConverter', function($window) {\n  return {\n\n    /**\n     * Convert string to snake case\n     */\n    toSnakeCase(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str.replace(/(\\s*-*\\b\\w|[A-Z])/g, ($1) => {\n        $1 = $1.trim().toLowerCase().replace('-', '');\n        return ($1[0] === '_' ? '' : '_') + $1;\n      }).slice(1);\n    },\n\n    /**\n     * Convert string to camel case\n     */\n    toCamelCase(str, ucfirst) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str\n        .replace(/_+|-+/g, ' ')\n        .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) => {\n          if (Number(match) === 0) {\n            return '';\n          }\n          return (index === 0 && !ucfirst) ?\n            match.toLowerCase() : match.toUpperCase();\n        });\n    },\n\n    /**\n     * Convert string to proper case\n     */\n    toProperCase(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str\n        .replace(/\\b\\w+/g, match => {\n          return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n        })\n        .replace(/['’”‘“][A-Z]{1}\\b/g, match => {\n          return match.toLowerCase();\n        });\n    },\n\n    /**\n     * Dasherize a string\n     */\n    toDasherized(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      str = str.replace(/\\s\\(/, '-(');\n      return str.replace(/(\\s*-*\\b\\w|[A-Z]|_[a-z])/g, ($1) => {\n        $1 = $1.replace('_', '-').trim().toLowerCase();\n        return ($1[0] === '-' ? '' : '-') + $1;\n      }).slice(1).replace(/\\(-/, '(');\n    },\n\n    /**\n     * Make the first letter of a string uppercase\n     */\n    toUcFirst(str) {\n      if (typeof str !== 'string' && typeof str !== 'number') {\n        return '';\n      }\n      str = String(str).trim();\n      if (str === '') {\n        return '';\n      }\n      return str[0].toUpperCase() + str.substr(1);\n    },\n\n    /**\n     * Base 64 decode URL string\n     */\n    fromBase64(str) {\n      let o = str.replace('-', '+').replace('_', '/');\n      switch (o.length % 4) {\n        case 0:\n          break;\n        case 2:\n          o += '==';\n          break;\n        case 3:\n          o += '=';\n          break;\n        default:\n          throw 'Illegal base64 url string';\n      }\n      try {\n        return decodeURIComponent($window.atob(o));\n      }\n      catch (e) {\n        //Fall through\n      }\n    },\n  };\n});\n\n})(window, window.angular);\n"]}