!function(e,t,n){"use strict";t.module("Convert.Service",["Convert.StringConverter.Service","Convert.ObjectConverter.Service","Convert.QueryStringConverter.Service"]).factory("$convert",["$stringConverter","$objectConverter","$queryStringConverter",function(e,t,n){return{string:e,object:t,queryString:n}}])}(window,window.angular),function(e,t,n){"use strict";t.module("Convert.ObjectConverter.Service",["Convert.StringConverter.Service"]).factory("$objectConverter",["$stringConverter",function(e){function n(n,o){if(!t.isObject(n))throw new TypeError("Not an object");if(void 0===e[o])throw new Error("Invalid converter: "+o);var a={};for(var s in n)if(n.hasOwnProperty(s)){var r=e[o](s);a[r]=t.copy(n[s])}return a}return{keysToSnakeCase:function(e){return n(e,"toSnakeCase")},keysToCamelCase:function(e){return n(e,"toCamelCase")}}}])}(window,window.angular);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t,n){"use strict";describe("ObjectConverter",function(){beforeEach(module("Convert.ObjectConverter.Service"));var e=void 0;beforeEach(inject(function(t){e=t})),describe("keysToCamelCase",function(){it("should return an object when passed an object",function(){var t={},n=e.keysToCamelCase(t);expect(void 0===n?"undefined":_typeof(n)).toBe("object"),expect(n).not.toBeNull()}),it("should return an object with the same properties",function(){var t={a:1,b:2,c:3},n=e.keysToCamelCase(t);expect(n.a).toBeDefined(),expect(n.b).toBeDefined(),expect(n.c).toBeDefined()}),it("should return an object with the same property values",function(){var t={a:1,b:2,c:3},n=e.keysToCamelCase(t);expect(n.a).toBe(t.a),expect(n.b).toBe(t.b),expect(n.c).toBe(t.c)}),it("should not camel case simple keys",function(){var t={simple:1},n=e.keysToCamelCase(t);expect(n.simple).toBeDefined()}),it("should camel case snake cased keys",function(){var t={snake_cased:1,more_snake_cased:2},n=e.keysToCamelCase(t);expect(n.snakeCased).toBeDefined(),expect(n.moreSnakeCased).toBeDefined()}),it("should not preserve the original keys",function(){var t={snake_cased:1,more_snake_cased:2},n=e.keysToCamelCase(t);expect(n.snake_cased).not.toBeDefined(),expect(n.more_snake_cased).not.toBeDefined()}),it("should throw a type error on invalid input",function(){expect(e.keysToCamelCase).toThrowError(TypeError),expect(function(){e.keysToCamelCase(null)}).toThrowError(TypeError),expect(function(){e.keysToCamelCase(1)}).toThrowError(TypeError),expect(function(){e.keysToCamelCase("a")}).toThrowError(TypeError)})}),describe("keysToSnakeCase",function(){it("should return an object when passed an object",function(){var t={},n=e.keysToSnakeCase(t);expect(void 0===n?"undefined":_typeof(n)).toBe("object"),expect(n).not.toBeNull()}),it("should return an object with the same properties",function(){var t={a:1,b:2,c:3},n=e.keysToSnakeCase(t);expect(n.a).toBeDefined(),expect(n.b).toBeDefined(),expect(n.c).toBeDefined()}),it("should return an object with the same property values",function(){var t={a:1,b:2,c:3},n=e.keysToSnakeCase(t);expect(n.a).toBe(t.a),expect(n.b).toBe(t.b),expect(n.c).toBe(t.c)}),it("should not snake case simple keys",function(){var t={simple:1},n=e.keysToSnakeCase(t);expect(n.simple).toBeDefined()}),it("should snake case camel cased keys",function(){var t={camelCased:1,moreCamelCased:2},n=e.keysToSnakeCase(t);expect(n.camel_cased).toBeDefined(),expect(n.more_camel_cased).toBeDefined()}),it("should not preserve the original keys",function(){var t={camelCased:1,moreCamelCased:2},n=e.keysToSnakeCase(t);expect(n.camelCased).not.toBeDefined(),expect(n.moreCamelCased).not.toBeDefined()}),it("should throw a type error on invalid input",function(){expect(e.keysToSnakeCase).toThrowError(TypeError),expect(function(){e.keysToSnakeCase(null)}).toThrowError(TypeError),expect(function(){e.keysToSnakeCase(1)}).toThrowError(TypeError),expect(function(){e.keysToSnakeCase("a")}).toThrowError(TypeError)})})})}(window,window.angular),function(e,t,n){"use strict";t.module("Convert.QueryStringConverter.Service",["Convert.StringConverter.Service"]).factory("$queryStringConverter",["$stringConverter",function(e){function n(e){try{return decodeURIComponent(e)}catch(e){}}function o(e,t){try{return encodeURIComponent(e).replace(/%40/g,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,t?"%20":"+")}catch(e){}}function a(t,n){switch(n){case"snake":return e.toSnakeCase(t);case"camel":return e.toCamelCase(t)}return t}return{toObject:function(e,o){var s={},r=void 0,i=void 0,c=void 0;return t.forEach((e||"").split("&"),function(e){e&&(r=e.replace(/\+/g,"%20").split("="),i=n(r[0]),t.isDefined(i)&&(i=a(i,o),c=!t.isDefined(r[1])||n(r[1]),hasOwnProperty.call(s,i)?t.isArray(s[i])?s[i].push(c):s[i]=[s[i],c]:s[i]=c))}),s},fromObject:function(n,a){if(!n||!t.isObject(n))return"";var s=[];return t.forEach(n,function(n,r){null===n||t.isUndefined(n)||(t.isArray(n)||(n=[n]),t.forEach(n,function(n){switch(t.isObject(n)&&(n=t.isDate(n)?n.toISOString():t.toJson(n)),a){case"snake":r=e.toSnakeCase(r);break;case"camel":r=e.toCamelCase(r)}s.push(o(r)+"="+o(n))}))}),s.length>0?s.join("&"):""}}}])}(window,window.angular),function(e,t,n){"use strict";t.module("Convert.StringConverter.Service",[]).factory("$stringConverter",["$window",function(e){return{toSnakeCase:function(e){return"number"==typeof e?String(e):"string"!=typeof e?"":""===(e=String(e).trim())?"":e.replace(/(\s*\-*\b\w|[A-Z])/g,function(e){return e=e.trim().toLowerCase().replace("-",""),("_"===e[0]?"":"_")+e}).slice(1)},toCamelCase:function(e,t){return"number"==typeof e?String(e):"string"!=typeof e?"":""===(e=String(e).trim())?"":e.replace(/_+|\-+/g," ").replace(/(?:^\w|[A-Z]|\b\w|\s+)/g,function(e,n){return 0===Number(e)?"":0!==n||t?e.toUpperCase():e.toLowerCase()})},toDasherized:function(e){return"number"==typeof e?String(e):"string"!=typeof e?"":""===(e=String(e).trim())?"":(e=e.replace(/\s\(/,"-("),e.replace(/(\s*\-*\b\w|[A-Z]|_[a-z])/g,function(e){return e=e.replace("_","-").trim().toLowerCase(),("-"===e[0]?"":"-")+e}).slice(1).replace(/\(-/,"("))},toUcFirst:function(e){return"string"!=typeof e&&"number"!=typeof e?"":(e=String(e).trim(),""===e?"":e[0].toUpperCase()+e.substr(1))},fromBase64:function(t){var n=t.replace("-","+").replace("_","/");switch(n.length%4){case 0:break;case 2:n+="==";break;case 3:n+="=";break;default:throw"Illegal base64 url string"}try{return decodeURIComponent(e.atob(n))}catch(e){}}}}])}(window,window.angular),function(e,t,n){"use strict";describe("StringConverter",function(){beforeEach(module("Convert.StringConverter.Service"));var e=void 0;beforeEach(inject(function(t){e=t})),describe("toCamelCase",function(){describe("camel casing",function(){it("should camel case an already camel cased string",function(){expect(e.toCamelCase("camelCase")).toBe("camelCase")}),it("should camel case a snake cased string",function(){expect(e.toCamelCase("camel_case")).toBe("camelCase")}),it("should camel case a dasherized string",function(){expect(e.toCamelCase("camel-case")).toBe("camelCase")}),it("should camel case a string with spaces",function(){expect(e.toCamelCase("camel case")).toBe("camelCase")}),it("should camel case a string with multiple spaces",function(){expect(e.toCamelCase("camel   case")).toBe("camelCase"),expect(e.toCamelCase("camel   ca se")).toBe("camelCaSe")}),it("should camel case a mixed string",function(){expect(e.toCamelCase("CamelCase With snake_case _and  dash-erized -andCamel")).toBe("camelCaseWithSnakeCaseAndDashErizedAndCamel"),expect(e.toCamelCase("camel_case With  vari-ety andCamel")).toBe("camelCaseWithVariEtyAndCamel")}),it("should lowercase single letters",function(){expect(e.toCamelCase("A")).toBe("a"),expect(e.toCamelCase("F")).toBe("f"),expect(e.toCamelCase("Z")).toBe("z")}),it("should trim and camel case with leading/trailing spaces",function(){expect(e.toCamelCase(" test_me ")).toBe("testMe"),expect(e.toCamelCase("  test_me")).toBe("testMe"),expect(e.toCamelCase("test_me  ")).toBe("testMe"),expect(e.toCamelCase("  test_me  ")).toBe("testMe")}),it("should capitalize the first letter as well when requested",function(){expect(e.toCamelCase("camelCase",!0)).toBe("CamelCase"),expect(e.toCamelCase("camel-case",!0)).toBe("CamelCase"),expect(e.toCamelCase("camel_case",!0)).toBe("CamelCase")})}),describe("numbers",function(){it("should accept numbers and return them as a string",function(){expect(e.toCamelCase(123)).toBe("123"),expect(e.toCamelCase(1.23)).toBe("1.23"),expect(e.toCamelCase(0)).toBe("0"),expect(e.toCamelCase(-123)).toBe("-123")})}),describe("invalid input",function(){it("should return an empty string for empty strings",function(){expect(e.toCamelCase("")).toBe("")}),it("should return an empty string for booleans",function(){expect(e.toCamelCase(!0)).toBe(""),expect(e.toCamelCase(!1)).toBe("")}),it("should return an empty string for null",function(){expect(e.toCamelCase(null)).toBe("")}),it("should return an empty string for undefined",function(){expect(e.toCamelCase(null)).toBe("")}),it("should return an empty string for objects",function(){expect(e.toCamelCase({})).toBe("")}),it("should return an empty string for arrays",function(){expect(e.toCamelCase([])).toBe("")})})}),describe("toSnakeCase",function(){describe("snake casing",function(){it("should snake case an already snake cased string",function(){expect(e.toSnakeCase("snake_case")).toBe("snake_case")}),it("should snake case a camel cased string",function(){expect(e.toSnakeCase("snakeCase")).toBe("snake_case"),expect(e.toSnakeCase("SnakeCase")).toBe("snake_case"),expect(e.toSnakeCase("SnAkeCASe")).toBe("sn_ake_c_a_se")}),it("should snake case a dasherized string",function(){expect(e.toSnakeCase("snake-case")).toBe("snake_case"),expect(e.toSnakeCase("Snake-Case")).toBe("snake_case")}),it("should snake case a string with spaces",function(){expect(e.toSnakeCase("Snake Case")).toBe("snake_case")}),it("should snake case a string with multiple spaces",function(){expect(e.toSnakeCase("Snake   Case")).toBe("snake_case"),expect(e.toSnakeCase("Snake   Ca se")).toBe("snake_ca_se")}),it("should snake case a mixed string",function(){expect(e.toSnakeCase("Snake-Case mixEd Stri_ng te-st")).toBe("snake_case_mix_ed_stri_ng_te_st"),expect(e.toSnakeCase("CamelCase With snake_case _and  dash-erized -andCamel")).toBe("camel_case_with_snake_case_and_dash_erized_and_camel")}),it("should lowercase single letters",function(){expect(e.toSnakeCase("A")).toBe("a"),expect(e.toSnakeCase("F")).toBe("f"),expect(e.toSnakeCase("Z")).toBe("z")}),it("should trim and snake case with leading/trailing spaces",function(){expect(e.toSnakeCase(" TestMe ")).toBe("test_me"),expect(e.toSnakeCase("  TestMe")).toBe("test_me"),expect(e.toSnakeCase("TestMe  ")).toBe("test_me"),expect(e.toSnakeCase("  TestMe  ")).toBe("test_me")})}),describe("numbers",function(){it("should accept numbers and return them as a string",function(){expect(e.toSnakeCase(123)).toBe("123"),expect(e.toSnakeCase(1.23)).toBe("1.23"),expect(e.toSnakeCase(0)).toBe("0"),expect(e.toSnakeCase(-123)).toBe("-123")})}),describe("invalid input",function(){it("should return an empty string for empty strings",function(){expect(e.toSnakeCase("")).toBe("")}),it("should return an empty string for booleans",function(){expect(e.toSnakeCase(!0)).toBe(""),expect(e.toSnakeCase(!1)).toBe("")}),it("should return an empty string for null",function(){expect(e.toSnakeCase(null)).toBe("")}),it("should return an empty string for undefined",function(){expect(e.toSnakeCase(null)).toBe("")}),it("should return an empty string for objects",function(){expect(e.toSnakeCase({})).toBe("")}),it("should return an empty string for arrays",function(){expect(e.toSnakeCase([])).toBe("")})})}),describe("toDasherized",function(){describe("dasherizing",function(){it("should dasherize an already dasherized string",function(){expect(e.toDasherized("dash-erized")).toBe("dash-erized")}),it("should dasherize a snake cased string",function(){expect(e.toDasherized("dash_erized")).toBe("dash-erized")}),it("should dasherize a camel cased string",function(){expect(e.toDasherized("dashErized")).toBe("dash-erized"),expect(e.toDasherized("DashErized")).toBe("dash-erized")}),it("should dasherize a string with spaces",function(){expect(e.toDasherized("dash erized")).toBe("dash-erized")}),it("should dasherize a string with multiple spaces",function(){expect(e.toDasherized("dash   erized")).toBe("dash-erized"),expect(e.toDasherized("dash   eri zed")).toBe("dash-eri-zed")}),it("should dasherize a mixed string",function(){expect(e.toDasherized("CamelCase With snake_case _and  dash-erized -andCamel")).toBe("camel-case-with-snake-case-and-dash-erized-and-camel")}),it("should lowercase single letters",function(){expect(e.toDasherized("A")).toBe("a"),expect(e.toDasherized("F")).toBe("f"),expect(e.toDasherized("Z")).toBe("z")}),it("should trim and dasherize with leading/trailing spaces",function(){expect(e.toDasherized(" test_me ")).toBe("test-me"),expect(e.toDasherized("  test_me")).toBe("test-me"),expect(e.toDasherized("test_me  ")).toBe("test-me"),expect(e.toDasherized("  test_me  ")).toBe("test-me")}),it("should dasherize a string with brackets",function(){expect(e.toDasherized("dash (erized)")).toBe("dash-(erized)"),expect(e.toDasherized("dash (erized) more")).toBe("dash-(erized)-more")})}),describe("numbers",function(){it("should accept numbers and return them as a string",function(){expect(e.toDasherized(123)).toBe("123"),expect(e.toDasherized(1.23)).toBe("1.23"),expect(e.toDasherized(0)).toBe("0"),expect(e.toDasherized(-123)).toBe("-123")})}),describe("invalid input",function(){it("should return an empty string for empty strings",function(){expect(e.toDasherized("")).toBe("")}),it("should return an empty string for booleans",function(){expect(e.toDasherized(!0)).toBe(""),expect(e.toDasherized(!1)).toBe("")}),it("should return an empty string for null",function(){expect(e.toDasherized(null)).toBe("")}),it("should return an empty string for undefined",function(){expect(e.toDasherized(null)).toBe("")}),it("should return an empty string for objects",function(){expect(e.toDasherized({})).toBe("")}),it("should return an empty string for arrays",function(){expect(e.toDasherized([])).toBe("")})})}),describe("toUcFirst",function(){describe("capitalization",function(){it("should capitalize the first letter of a string",function(){expect(e.toUcFirst("test")).toBe("Test"),expect(e.toUcFirst("test with spaces")).toBe("Test with spaces")}),it("should capitalize single letters",function(){expect(e.toUcFirst("a")).toBe("A"),expect(e.toUcFirst("f")).toBe("F"),expect(e.toUcFirst("z")).toBe("Z")}),it("should leave capitalization of the rest of the string intact",function(){expect(e.toUcFirst("tEsT")).toBe("TEsT")}),it("should trim and capitalize with leading and trailing spaces",function(){expect(e.toUcFirst(" test ")).toBe("Test"),expect(e.toUcFirst("  test")).toBe("Test"),expect(e.toUcFirst("test  ")).toBe("Test"),expect(e.toUcFirst("  test  ")).toBe("Test")})}),describe("numbers",function(){it("should accept numbers and return them as a string",function(){expect(e.toUcFirst(123)).toBe("123"),expect(e.toUcFirst(1.23)).toBe("1.23"),expect(e.toUcFirst(0)).toBe("0"),expect(e.toUcFirst(-123)).toBe("-123")})}),describe("invalid input",function(){it("should return an empty string for empty strings",function(){expect(e.toUcFirst("")).toBe("")}),it("should return an empty string for booleans",function(){expect(e.toUcFirst(!0)).toBe(""),expect(e.toUcFirst(!1)).toBe("")}),it("should return an empty string for null",function(){expect(e.toUcFirst(null)).toBe("")}),it("should return an empty string for undefined",function(){expect(e.toUcFirst(null)).toBe("")}),it("should return an empty string for objects",function(){expect(e.toUcFirst({})).toBe("")}),it("should return an empty string for arrays",function(){expect(e.toUcFirst([])).toBe("")})})})})}(window,window.angular);
//# sourceMappingURL=angular-convert.min.js.map
