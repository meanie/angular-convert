{"version":3,"sources":["convert.service.js","engines/objectConverter.service.js","engines/queryStringConverter.service.js","engines/stringConverter.service.js","meanie-angular-convert.min.js"],"names":["window","angular","undefined","module","factory","$stringConverter","$objectConverter","$queryStringConverter","string","object","queryString","convertObjectKeys","obj","converter","isObject","TypeError","Error","newObj","key","hasOwnProperty","newKey","copy","keysToSnakeCase","keysToCamelCase","tryDecodeURIComponent","str","decodeURIComponent","e","tryEncodeURIComponent","pctEncodeSpaces","encodeURIComponent","replace","convertToCase","convertCase","toSnakeCase","toCamelCase","toObject","s","kv","val","forEach","split","isDefined","call","isArray","push","fromObject","parts","value","isUndefined","v","isDate","toISOString","toJson","length","join","$window","String","trim","$1","toLowerCase","slice","ucfirst","match","index","toUpperCase","toDasherized","toUcfirst","substr","fromBase64","o","atob"],"mappings":"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","file":"meanie-angular-convert.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.Service', [\n  'Convert.StringConverter.Service',\n  'Convert.ObjectConverter.Service',\n  'Convert.QueryStringConverter.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$convert', ['$stringConverter', '$objectConverter', '$queryStringConverter', function($stringConverter, $objectConverter, $queryStringConverter) {\n  return {\n    string: $stringConverter,\n    object: $objectConverter,\n    queryString: $queryStringConverter\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.ObjectConverter.Service', [\n  'Convert.StringConverter.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$objectConverter', ['$stringConverter', function($stringConverter) {\n\n  /**\n   * Helper to convert object keys using a specified string converter\n   */\n  function convertObjectKeys(obj, converter) {\n\n    //Must have object\n    if (!angular.isObject(obj)) {\n      throw new TypeError('Not an object');\n    }\n\n    //Validate case\n    if (typeof $stringConverter[converter] === 'undefined') {\n      throw new Error('Invalid converter: ' + converter);\n    }\n\n    //Initialize object\n    var newObj = {};\n\n    //Loop keys\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var newKey = $stringConverter[converter](key);\n        newObj[newKey] = angular.copy(obj[key]);\n      }\n    }\n\n    //Return object\n    return newObj;\n  }\n\n  /**\n   * Object converter\n   */\n  return {\n\n    /**\n     * Convert object keys to snake case\n     */\n    keysToSnakeCase: function(obj) {\n      return convertObjectKeys(obj, 'toSnakeCase');\n    },\n\n    /**\n     * Convert object keys to snake case\n     */\n    keysToCamelCase: function(obj) {\n      return convertObjectKeys(obj, 'toCamelCase');\n    }\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.QueryStringConverter.Service', [\n  'Convert.StringConverter.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$queryStringConverter', ['$stringConverter', function($stringConverter) {\n\n  /**\n   * Tries to decode an URI component without throwing an exception\n   */\n  function tryDecodeURIComponent(str) {\n    try {\n      return decodeURIComponent(str);\n    } catch (e) {}\n  }\n\n  /**\n   * Tries to encode an URI component without throwing an exception\n   */\n  function tryEncodeURIComponent(str, pctEncodeSpaces) {\n    try {\n      return encodeURIComponent(str)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    } catch (e) {}\n  }\n\n  /**\n   * Converts a string to a specific case\n   */\n  function convertToCase(str, convertCase) {\n    switch (convertCase) {\n      case 'snake':\n        return $stringConverter.toSnakeCase(str);\n      case 'camel':\n        return $stringConverter.toCamelCase(str);\n    }\n    return str;\n  }\n\n  /**\n   * Query string converter\n   */\n  return {\n\n    /**\n     * Parses an escaped url query string into key-value pairs\n     */\n    toObject: function(s, convertCase) {\n      var obj = {};\n      var kv, key, val;\n      angular.forEach((s || '').split('&'), function(s) {\n        if (!s) {\n          return;\n        }\n\n        //Split key/value and decode key\n        kv = s.replace(/\\+/g, '%20').split('=');\n        key = tryDecodeURIComponent(kv[0]);\n\n        //If not defined, exit\n        if (!angular.isDefined(key)) {\n          return;\n        }\n\n        //Convert case and get value\n        key = convertToCase(key, convertCase);\n        val = angular.isDefined(kv[1]) ? tryDecodeURIComponent(kv[1]) : true;\n\n        //Set property\n        if (!hasOwnProperty.call(obj, key)) {\n          obj[key] = val;\n        }\n        else if (angular.isArray(obj[key])) {\n          obj[key].push(val);\n        }\n        else {\n          obj[key] = [obj[key], val];\n        }\n      });\n      return obj;\n    },\n\n    /**\n     * Convert key-value pairs object to a parametrized query string\n     */\n    fromObject: function(obj, convertCase) {\n\n      //No obj?\n      if (!obj || !angular.isObject(obj)) {\n        return '';\n      }\n\n      //Initialize parts array\n      var parts = [];\n\n      //Loop the parameters\n      angular.forEach(obj, function(value, key) {\n\n        //Skip null/undefined values\n        if (value === null || angular.isUndefined(value)) {\n          return;\n        }\n\n        //Convert to array\n        if (!angular.isArray(value)) {\n          value = [value];\n        }\n\n        //Loop values\n        angular.forEach(value, function(v) {\n\n          //Handle objects\n          if (angular.isObject(v)) {\n            if (angular.isDate(v)) {\n              v = v.toISOString();\n            }\n            else {\n              v = angular.toJson(v);\n            }\n          }\n\n          //Convert case?\n          switch (convertCase) {\n            case 'snake':\n              key = $stringConverter.toSnakeCase(key);\n              break;\n            case 'camel':\n              key = $stringConverter.toCamelCase(key);\n              break;\n          }\n\n          //Push to parts\n          parts.push(tryEncodeURIComponent(key) + '=' + tryEncodeURIComponent(v));\n        });\n      });\n\n      //Any parts?\n      if (parts.length > 0) {\n        return parts.join('&');\n      }\n\n      //No parts\n      return '';\n    }\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.StringConverter.Service', [])\n\n/**\n * Factory definition\n */\n.factory('$stringConverter', ['$window', function($window) {\n  return {\n\n    /**\n     * Convert string to snake case\n     */\n    toSnakeCase: function(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str.replace(/(\\s*\\-*\\b\\w|[A-Z])/g, function($1) {\n        $1 = $1.trim().toLowerCase().replace('-', '');\n        return ($1[0] === '_' ? '' : '_') + $1;\n      }).slice(1);\n    },\n\n    /**\n     * Convert string to camel case\n     */\n    toCamelCase: function(str, ucfirst) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str\n        .replace(/_+|\\-+/g, ' ')\n        .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n          if (+match === 0) {\n            return '';\n          }\n          return (index === 0 && !ucfirst) ? match.toLowerCase() : match.toUpperCase();\n        });\n    },\n\n    /**\n     * Dasherize a string\n     */\n    toDasherized: function(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str.replace(/(\\s*\\-*\\b\\w|[A-Z]|_[a-z])/g, function($1) {\n        $1 = $1.replace('_', '-').trim().toLowerCase();\n        return ($1[0] === '-' ? '' : '-') + $1;\n      }).slice(1);\n    },\n\n    /**\n     * Make the first letter of a string uppercase\n     */\n    toUcfirst: function(str) {\n      if (typeof str !== 'string' && typeof str !== 'number') {\n        return '';\n      }\n      str = String(str).trim();\n      if (str === '') {\n        return '';\n      }\n      return str[0].toUpperCase() + str.substr(1);\n    },\n\n    /**\n     * Base 64 decode URL string\n     */\n    fromBase64: function(str) {\n      var o = str.replace('-', '+').replace('_', '/');\n      switch (o.length % 4) {\n        case 0:\n          break;\n        case 2:\n          o += '==';\n          break;\n        case 3:\n          o += '=';\n          break;\n        default:\n          throw 'Illegal base64 url string';\n      }\n      try {\n        return decodeURIComponent($window.atob(o));\n      }\n      catch (e) {}\n    }\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-convert - v0.4.7 - 31-6-2015\n * https://github.com/meanie/angular-convert\n *\n * Copyright (c) 2015 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n!function(e,r,t){\"use strict\";r.module(\"Convert.Service\",[\"Convert.StringConverter.Service\",\"Convert.ObjectConverter.Service\",\"Convert.QueryStringConverter.Service\"]).factory(\"$convert\",[\"$stringConverter\",\"$objectConverter\",\"$queryStringConverter\",function(e,r,t){return{string:e,object:r,queryString:t}}])}(window,window.angular),function(e,r,t){\"use strict\";r.module(\"Convert.ObjectConverter.Service\",[\"Convert.StringConverter.Service\"]).factory(\"$objectConverter\",[\"$stringConverter\",function(e){function t(t,n){if(!r.isObject(t))throw new TypeError(\"Not an object\");if(\"undefined\"==typeof e[n])throw new Error(\"Invalid converter: \"+n);var o={};for(var i in t)if(t.hasOwnProperty(i)){var c=e[n](i);o[c]=r.copy(t[i])}return o}return{keysToSnakeCase:function(e){return t(e,\"toSnakeCase\")},keysToCamelCase:function(e){return t(e,\"toCamelCase\")}}}])}(window,window.angular),function(e,r,t){\"use strict\";r.module(\"Convert.QueryStringConverter.Service\",[\"Convert.StringConverter.Service\"]).factory(\"$queryStringConverter\",[\"$stringConverter\",function(e){function t(e){try{return decodeURIComponent(e)}catch(r){}}function n(e,r){try{return encodeURIComponent(e).replace(/%40/g,\"@\").replace(/%3A/gi,\":\").replace(/%24/g,\"$\").replace(/%2C/gi,\",\").replace(/%20/g,r?\"%20\":\"+\")}catch(t){}}function o(r,t){switch(t){case\"snake\":return e.toSnakeCase(r);case\"camel\":return e.toCamelCase(r)}return r}return{toObject:function(e,n){var i,c,a,u={};return r.forEach((e||\"\").split(\"&\"),function(e){e&&(i=e.replace(/\\+/g,\"%20\").split(\"=\"),c=t(i[0]),r.isDefined(c)&&(c=o(c,n),a=r.isDefined(i[1])?t(i[1]):!0,hasOwnProperty.call(u,c)?r.isArray(u[c])?u[c].push(a):u[c]=[u[c],a]:u[c]=a))}),u},fromObject:function(t,o){if(!t||!r.isObject(t))return\"\";var i=[];return r.forEach(t,function(t,c){null===t||r.isUndefined(t)||(r.isArray(t)||(t=[t]),r.forEach(t,function(t){switch(r.isObject(t)&&(t=r.isDate(t)?t.toISOString():r.toJson(t)),o){case\"snake\":c=e.toSnakeCase(c);break;case\"camel\":c=e.toCamelCase(c)}i.push(n(c)+\"=\"+n(t))}))}),i.length>0?i.join(\"&\"):\"\"}}}])}(window,window.angular),function(e,r,t){\"use strict\";r.module(\"Convert.StringConverter.Service\",[]).factory(\"$stringConverter\",[\"$window\",function(e){return{toSnakeCase:function(e){return\"number\"==typeof e?String(e):\"string\"!=typeof e?\"\":\"\"===(e=String(e).trim())?\"\":e.replace(/(\\s*\\-*\\b\\w|[A-Z])/g,function(e){return e=e.trim().toLowerCase().replace(\"-\",\"\"),(\"_\"===e[0]?\"\":\"_\")+e}).slice(1)},toCamelCase:function(e,r){return\"number\"==typeof e?String(e):\"string\"!=typeof e?\"\":\"\"===(e=String(e).trim())?\"\":e.replace(/_+|\\-+/g,\" \").replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g,function(e,t){return 0===+e?\"\":0!==t||r?e.toUpperCase():e.toLowerCase()})},toDasherized:function(e){return\"number\"==typeof e?String(e):\"string\"!=typeof e?\"\":\"\"===(e=String(e).trim())?\"\":e.replace(/(\\s*\\-*\\b\\w|[A-Z]|_[a-z])/g,function(e){return e=e.replace(\"_\",\"-\").trim().toLowerCase(),(\"-\"===e[0]?\"\":\"-\")+e}).slice(1)},toUcfirst:function(e){return\"string\"!=typeof e&&\"number\"!=typeof e?\"\":(e=String(e).trim(),\"\"===e?\"\":e[0].toUpperCase()+e.substr(1))},fromBase64:function(r){var t=r.replace(\"-\",\"+\").replace(\"_\",\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64 url string\"}try{return decodeURIComponent(e.atob(t))}catch(n){}}}}])}(window,window.angular);\n//# sourceMappingURL=meanie-angular-convert.min.js.map"],"sourceRoot":"/source/"}