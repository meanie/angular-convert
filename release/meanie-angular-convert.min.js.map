{"version":3,"sources":["meanie-angular-convert.min.js","convert.service.js","engines/objectConverter.service.js","engines/queryStringConverter.service.js","engines/stringConverter.service.js"],"names":["window","angular","undefined","module","factory","$stringConverter","$objectConverter","$queryStringConverter","string","object","queryString","convertObjectKeys","obj","converter","isObject","TypeError","Error","newObj","key","hasOwnProperty","newKey","copy","keysToSnakeCase","keysToCamelCase","tryDecodeURIComponent","str","decodeURIComponent","e","tryEncodeURIComponent","pctEncodeSpaces","encodeURIComponent","replace","convertToCase","convertCase","toSnakeCase","toCamelCase","toObject","s","kv","val","forEach","split","isDefined","call","isArray","push","fromObject","parts","value","isUndefined","v","isDate","toISOString","toJson","length","join","$window","String","trim","$1","toLowerCase","slice","ucfirst","match","index","toUpperCase","toDasherized","toUcFirst","substr","fromBase64","o","atob"],"mappings":"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","file":"meanie-angular-convert.min.js","sourcesContent":["/**\n * meanie-angular-convert - v1.2.3 - 18-6-2016\n * https://github.com/meanie/angular-convert\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Convert.Service', ['Convert.StringConverter.Service', 'Convert.ObjectConverter.Service', 'Convert.QueryStringConverter.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$convert', ['$stringConverter', '$objectConverter', '$queryStringConverter', function ($stringConverter, $objectConverter, $queryStringConverter) {\n    return {\n      string: $stringConverter,\n      object: $objectConverter,\n      queryString: $queryStringConverter\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Convert.ObjectConverter.Service', ['Convert.StringConverter.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$objectConverter', ['$stringConverter', function ($stringConverter) {\n\n    /**\n     * Helper to convert object keys using a specified string converter\n     */\n    function convertObjectKeys(obj, converter) {\n\n      //Must have object\n      if (!angular.isObject(obj)) {\n        throw new TypeError('Not an object');\n      }\n\n      //Validate case\n      if (typeof $stringConverter[converter] === 'undefined') {\n        throw new Error('Invalid converter: ' + converter);\n      }\n\n      //Initialize object\n      var newObj = {};\n\n      //Loop keys\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          var newKey = $stringConverter[converter](key);\n          newObj[newKey] = angular.copy(obj[key]);\n        }\n      }\n\n      //Return object\n      return newObj;\n    }\n\n    /**\n     * Object converter\n     */\n    return {\n\n      /**\n       * Convert object keys to snake case\n       */\n      keysToSnakeCase: function keysToSnakeCase(obj) {\n        return convertObjectKeys(obj, 'toSnakeCase');\n      },\n\n      /**\n       * Convert object keys to snake case\n       */\n      keysToCamelCase: function keysToCamelCase(obj) {\n        return convertObjectKeys(obj, 'toCamelCase');\n      }\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Convert.QueryStringConverter.Service', ['Convert.StringConverter.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$queryStringConverter', ['$stringConverter', function ($stringConverter) {\n\n    /**\n     * Tries to decode an URI component without throwing an exception\n     */\n    function tryDecodeURIComponent(str) {\n      try {\n        return decodeURIComponent(str);\n      } catch (e) {}\n    }\n\n    /**\n     * Tries to encode an URI component without throwing an exception\n     */\n    function tryEncodeURIComponent(str, pctEncodeSpaces) {\n      try {\n        return encodeURIComponent(str).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');\n      } catch (e) {}\n    }\n\n    /**\n     * Converts a string to a specific case\n     */\n    function convertToCase(str, convertCase) {\n      switch (convertCase) {\n        case 'snake':\n          return $stringConverter.toSnakeCase(str);\n        case 'camel':\n          return $stringConverter.toCamelCase(str);\n      }\n      return str;\n    }\n\n    /**\n     * Query string converter\n     */\n    return {\n\n      /**\n       * Parses an escaped url query string into key-value pairs\n       */\n      toObject: function toObject(s, convertCase) {\n        var obj = {};\n        var kv, key, val;\n        angular.forEach((s || '').split('&'), function (s) {\n          if (!s) {\n            return;\n          }\n\n          //Split key/value and decode key\n          kv = s.replace(/\\+/g, '%20').split('=');\n          key = tryDecodeURIComponent(kv[0]);\n\n          //If not defined, exit\n          if (!angular.isDefined(key)) {\n            return;\n          }\n\n          //Convert case and get value\n          key = convertToCase(key, convertCase);\n          val = angular.isDefined(kv[1]) ? tryDecodeURIComponent(kv[1]) : true;\n\n          //Set property\n          if (!hasOwnProperty.call(obj, key)) {\n            obj[key] = val;\n          } else if (angular.isArray(obj[key])) {\n            obj[key].push(val);\n          } else {\n            obj[key] = [obj[key], val];\n          }\n        });\n        return obj;\n      },\n\n      /**\n       * Convert key-value pairs object to a parametrized query string\n       */\n      fromObject: function fromObject(obj, convertCase) {\n\n        //No obj?\n        if (!obj || !angular.isObject(obj)) {\n          return '';\n        }\n\n        //Initialize parts array\n        var parts = [];\n\n        //Loop the parameters\n        angular.forEach(obj, function (value, key) {\n\n          //Skip null/undefined values\n          if (value === null || angular.isUndefined(value)) {\n            return;\n          }\n\n          //Convert to array\n          if (!angular.isArray(value)) {\n            value = [value];\n          }\n\n          //Loop values\n          angular.forEach(value, function (v) {\n\n            //Handle objects\n            if (angular.isObject(v)) {\n              if (angular.isDate(v)) {\n                v = v.toISOString();\n              } else {\n                v = angular.toJson(v);\n              }\n            }\n\n            //Convert case?\n            switch (convertCase) {\n              case 'snake':\n                key = $stringConverter.toSnakeCase(key);\n                break;\n              case 'camel':\n                key = $stringConverter.toCamelCase(key);\n                break;\n            }\n\n            //Push to parts\n            parts.push(tryEncodeURIComponent(key) + '=' + tryEncodeURIComponent(v));\n          });\n        });\n\n        //Any parts?\n        if (parts.length > 0) {\n          return parts.join('&');\n        }\n\n        //No parts\n        return '';\n      }\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Convert.StringConverter.Service', [])\n\n  /**\n   * Factory definition\n   */\n  .factory('$stringConverter', ['$window', function ($window) {\n    return {\n\n      /**\n       * Convert string to snake case\n       */\n      toSnakeCase: function toSnakeCase(str) {\n        if (typeof str === 'number') {\n          return String(str);\n        } else if (typeof str !== 'string') {\n          return '';\n        }\n        if ((str = String(str).trim()) === '') {\n          return '';\n        }\n        return str.replace(/(\\s*\\-*\\b\\w|[A-Z])/g, function ($1) {\n          $1 = $1.trim().toLowerCase().replace('-', '');\n          return ($1[0] === '_' ? '' : '_') + $1;\n        }).slice(1);\n      },\n\n      /**\n       * Convert string to camel case\n       */\n      toCamelCase: function toCamelCase(str, ucfirst) {\n        if (typeof str === 'number') {\n          return String(str);\n        } else if (typeof str !== 'string') {\n          return '';\n        }\n        if ((str = String(str).trim()) === '') {\n          return '';\n        }\n        return str.replace(/_+|\\-+/g, ' ').replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n          if (+match === 0) {\n            return '';\n          }\n          return index === 0 && !ucfirst ? match.toLowerCase() : match.toUpperCase();\n        });\n      },\n\n      /**\n       * Dasherize a string\n       */\n      toDasherized: function toDasherized(str) {\n        if (typeof str === 'number') {\n          return String(str);\n        } else if (typeof str !== 'string') {\n          return '';\n        }\n        if ((str = String(str).trim()) === '') {\n          return '';\n        }\n        return str.replace(/(\\s*\\-*\\b\\w|[A-Z]|_[a-z])/g, function ($1) {\n          $1 = $1.replace('_', '-').trim().toLowerCase();\n          return ($1[0] === '-' ? '' : '-') + $1;\n        }).slice(1);\n      },\n\n      /**\n       * Make the first letter of a string uppercase\n       */\n      toUcFirst: function toUcFirst(str) {\n        if (typeof str !== 'string' && typeof str !== 'number') {\n          return '';\n        }\n        str = String(str).trim();\n        if (str === '') {\n          return '';\n        }\n        return str[0].toUpperCase() + str.substr(1);\n      },\n\n      /**\n       * Base 64 decode URL string\n       */\n      fromBase64: function fromBase64(str) {\n        var o = str.replace('-', '+').replace('_', '/');\n        switch (o.length % 4) {\n          case 0:\n            break;\n          case 2:\n            o += '==';\n            break;\n          case 3:\n            o += '=';\n            break;\n          default:\n            throw 'Illegal base64 url string';\n        }\n        try {\n          return decodeURIComponent($window.atob(o));\n        } catch (e) {}\n      }\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.Service', [\n  'Convert.StringConverter.Service',\n  'Convert.ObjectConverter.Service',\n  'Convert.QueryStringConverter.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$convert', function($stringConverter, $objectConverter, $queryStringConverter) {\n  return {\n    string: $stringConverter,\n    object: $objectConverter,\n    queryString: $queryStringConverter\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.ObjectConverter.Service', [\n  'Convert.StringConverter.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$objectConverter', function($stringConverter) {\n\n  /**\n   * Helper to convert object keys using a specified string converter\n   */\n  function convertObjectKeys(obj, converter) {\n\n    //Must have object\n    if (!angular.isObject(obj)) {\n      throw new TypeError('Not an object');\n    }\n\n    //Validate case\n    if (typeof $stringConverter[converter] === 'undefined') {\n      throw new Error('Invalid converter: ' + converter);\n    }\n\n    //Initialize object\n    var newObj = {};\n\n    //Loop keys\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var newKey = $stringConverter[converter](key);\n        newObj[newKey] = angular.copy(obj[key]);\n      }\n    }\n\n    //Return object\n    return newObj;\n  }\n\n  /**\n   * Object converter\n   */\n  return {\n\n    /**\n     * Convert object keys to snake case\n     */\n    keysToSnakeCase: function(obj) {\n      return convertObjectKeys(obj, 'toSnakeCase');\n    },\n\n    /**\n     * Convert object keys to snake case\n     */\n    keysToCamelCase: function(obj) {\n      return convertObjectKeys(obj, 'toCamelCase');\n    }\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.QueryStringConverter.Service', [\n  'Convert.StringConverter.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$queryStringConverter', function($stringConverter) {\n\n  /**\n   * Tries to decode an URI component without throwing an exception\n   */\n  function tryDecodeURIComponent(str) {\n    try {\n      return decodeURIComponent(str);\n    } catch (e) {}\n  }\n\n  /**\n   * Tries to encode an URI component without throwing an exception\n   */\n  function tryEncodeURIComponent(str, pctEncodeSpaces) {\n    try {\n      return encodeURIComponent(str)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n    } catch (e) {}\n  }\n\n  /**\n   * Converts a string to a specific case\n   */\n  function convertToCase(str, convertCase) {\n    switch (convertCase) {\n      case 'snake':\n        return $stringConverter.toSnakeCase(str);\n      case 'camel':\n        return $stringConverter.toCamelCase(str);\n    }\n    return str;\n  }\n\n  /**\n   * Query string converter\n   */\n  return {\n\n    /**\n     * Parses an escaped url query string into key-value pairs\n     */\n    toObject: function(s, convertCase) {\n      var obj = {};\n      var kv, key, val;\n      angular.forEach((s || '').split('&'), function(s) {\n        if (!s) {\n          return;\n        }\n\n        //Split key/value and decode key\n        kv = s.replace(/\\+/g, '%20').split('=');\n        key = tryDecodeURIComponent(kv[0]);\n\n        //If not defined, exit\n        if (!angular.isDefined(key)) {\n          return;\n        }\n\n        //Convert case and get value\n        key = convertToCase(key, convertCase);\n        val = angular.isDefined(kv[1]) ? tryDecodeURIComponent(kv[1]) : true;\n\n        //Set property\n        if (!hasOwnProperty.call(obj, key)) {\n          obj[key] = val;\n        }\n        else if (angular.isArray(obj[key])) {\n          obj[key].push(val);\n        }\n        else {\n          obj[key] = [obj[key], val];\n        }\n      });\n      return obj;\n    },\n\n    /**\n     * Convert key-value pairs object to a parametrized query string\n     */\n    fromObject: function(obj, convertCase) {\n\n      //No obj?\n      if (!obj || !angular.isObject(obj)) {\n        return '';\n      }\n\n      //Initialize parts array\n      var parts = [];\n\n      //Loop the parameters\n      angular.forEach(obj, function(value, key) {\n\n        //Skip null/undefined values\n        if (value === null || angular.isUndefined(value)) {\n          return;\n        }\n\n        //Convert to array\n        if (!angular.isArray(value)) {\n          value = [value];\n        }\n\n        //Loop values\n        angular.forEach(value, function(v) {\n\n          //Handle objects\n          if (angular.isObject(v)) {\n            if (angular.isDate(v)) {\n              v = v.toISOString();\n            }\n            else {\n              v = angular.toJson(v);\n            }\n          }\n\n          //Convert case?\n          switch (convertCase) {\n            case 'snake':\n              key = $stringConverter.toSnakeCase(key);\n              break;\n            case 'camel':\n              key = $stringConverter.toCamelCase(key);\n              break;\n          }\n\n          //Push to parts\n          parts.push(tryEncodeURIComponent(key) + '=' + tryEncodeURIComponent(v));\n        });\n      });\n\n      //Any parts?\n      if (parts.length > 0) {\n        return parts.join('&');\n      }\n\n      //No parts\n      return '';\n    }\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Convert.StringConverter.Service', [])\n\n/**\n * Factory definition\n */\n.factory('$stringConverter', function($window) {\n  return {\n\n    /**\n     * Convert string to snake case\n     */\n    toSnakeCase: function(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str.replace(/(\\s*\\-*\\b\\w|[A-Z])/g, function($1) {\n        $1 = $1.trim().toLowerCase().replace('-', '');\n        return ($1[0] === '_' ? '' : '_') + $1;\n      }).slice(1);\n    },\n\n    /**\n     * Convert string to camel case\n     */\n    toCamelCase: function(str, ucfirst) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str\n        .replace(/_+|\\-+/g, ' ')\n        .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n          if (+match === 0) {\n            return '';\n          }\n          return (index === 0 && !ucfirst) ? match.toLowerCase() : match.toUpperCase();\n        });\n    },\n\n    /**\n     * Dasherize a string\n     */\n    toDasherized: function(str) {\n      if (typeof str === 'number') {\n        return String(str);\n      }\n      else if (typeof str !== 'string') {\n        return '';\n      }\n      if ((str = String(str).trim()) === '') {\n        return '';\n      }\n      return str.replace(/(\\s*\\-*\\b\\w|[A-Z]|_[a-z])/g, function($1) {\n        $1 = $1.replace('_', '-').trim().toLowerCase();\n        return ($1[0] === '-' ? '' : '-') + $1;\n      }).slice(1);\n    },\n\n    /**\n     * Make the first letter of a string uppercase\n     */\n    toUcFirst: function(str) {\n      if (typeof str !== 'string' && typeof str !== 'number') {\n        return '';\n      }\n      str = String(str).trim();\n      if (str === '') {\n        return '';\n      }\n      return str[0].toUpperCase() + str.substr(1);\n    },\n\n    /**\n     * Base 64 decode URL string\n     */\n    fromBase64: function(str) {\n      var o = str.replace('-', '+').replace('_', '/');\n      switch (o.length % 4) {\n        case 0:\n          break;\n        case 2:\n          o += '==';\n          break;\n        case 3:\n          o += '=';\n          break;\n        default:\n          throw 'Illegal base64 url string';\n      }\n      try {\n        return decodeURIComponent($window.atob(o));\n      }\n      catch (e) {}\n    }\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}